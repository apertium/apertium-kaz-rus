Index: lttoolbox/match_state.h
===================================================================
--- lttoolbox/match_state.h	(revisión: 40714)
+++ lttoolbox/match_state.h	(copia de trabajo)
@@ -106,6 +106,8 @@
    */
   void init(MatchNode *initial);
 
+  int classifyFinals(map<MatchNode *, int> const &final_class, set<int> const &banned_rules) const;
+  
   int classifyFinals(map<MatchNode *, int> const &final_class) const;
 
   void debug();
Index: lttoolbox/match_state.cc
===================================================================
--- lttoolbox/match_state.cc	(revisión: 40714)
+++ lttoolbox/match_state.cc	(copia de trabajo)
@@ -120,13 +120,20 @@
 int
 MatchState::classifyFinals(map<MatchNode *, int> const &final_class) const
 {
+  set<int> empty_set;
+  return classifyFinals(final_class, empty_set);
+}
+
+int
+MatchState::classifyFinals(map<MatchNode *, int> const &final_class, set<int> const &banned_rules) const
+{
   int result = INT_MAX;
   for (int i = first; i != last; i = (i+1)%BUF_LIMIT)
   {
     map<MatchNode*, int>::const_iterator it2 = final_class.find(state[i]);
     if(it2 != final_class.end())
     {
-      if(it2->second < result)
+      if(it2->second < result && banned_rules.find(it2->second) == banned_rules.end())
       {
         result = it2->second;
       }
Index: lttoolbox/buffer.h
===================================================================
--- lttoolbox/buffer.h	(revisión: 40714)
+++ lttoolbox/buffer.h	(copia de trabajo)
@@ -101,6 +101,11 @@
     {
       destroy();
     }
+    
+   unsigned int getSize() const
+   {
+	   return size;
+   }
 
   /**
    * Assign operator.
