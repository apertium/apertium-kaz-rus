<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->
<transfer default="chunk">


  <section-def-cats>
    <def-cat n="nom">
      <cat-item tags="n.*"/>
    </def-cat>
 <def-cat n="subj-pron">
      <cat-item tags="prn.pers.*"/>
    </def-cat>
<def-cat n="subj-pron-pos">
      <cat-item tags="prn.pos.*"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="sent"/>
    </def-cat>

 <def-cat n="pers-verb"> <!-- past and present tense -->
      <cat-item tags="vblex.impf.pres.*"/>
      <cat-item tags="vblex.impf.pres"/>
      <cat-item tags="vblex.impf.past"/>
     <cat-item tags="vblex.impf.past.*"/>
    </def-cat>   
<def-cat n="budu-vbser"> <!-- past and present tense -->
      <cat-item tags="vbser.fut.*"/>
      <cat-item tags="vbser.fut"/>
      
    </def-cat> 
    <def-cat n="approx-inf-verb"> <!-- infinitive and present where infinitive should have been found (tagger error) -->
      <cat-item tags="vblex.impf.inf"/> <!-- This may be dangerous and should be treated at tagger level -->      
</def-cat>
   <def-cat n="num">
      <cat-item tags="num"/>
      <cat-item tags="num.*"/>
      <cat-item tags="num.ord"/>
      <cat-item tags="det.ord"/>
      <cat-item tags="det.ord.*"/>
      <cat-item tags="num.itg"/>
    </def-cat>

  <def-cat n="vbmod"> <!-- Буду -->
      
      <cat-item lemma="быть" tags="vblex.impf.fut.*"/>
 	<cat-item lemma="быть" tags="vblex.impf.fut"/>
      
    </def-cat>

 
   <def-cat n="det">
      <cat-item tags="det.def.*"/>
      <cat-item tags="det.ind.*"/>
      <cat-item tags="det.pos.*"/>
      <cat-item tags="det.dem.*"/>
      <cat-item tags="det.qnt.*"/>
    </def-cat>
 <def-cat n="prep">
      <cat-item tags="pr"/>
     </def-cat>

  </section-def-cats>


  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
    </def-attr>
<def-attr n="a_pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
<def-attr n="a_pron">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
 <def-attr n="a_kaz_perspron"> 
      <attr-item tags="prn.pers"/>
  
    </def-attr>
 <def-attr n="a_kaz_pospron"> 
      <attr-item tags="prn.pos"/>
  
    </def-attr>
  <def-attr n="a_possessive"> <!-- check if complete -->
      <attr-item tags="PXD"/> <!-- to be determined -->
      <attr-item tags="px3sp"/>
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
    </def-attr>
    <def-attr n="a_case">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="dat"/>
      <attr-item tags="acc"/>
      <attr-item tags="abl"/>
      <attr-item tags="loc"/>
      <attr-item tags="sim"/> 
      <attr-item tags="ins"/>
      <attr-item tags="prp"/>
      <attr-item tags="CD"/>
    </def-attr>
    <def-attr n="a_nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
    </def-attr>
    <def-attr n="a_anim">
      <attr-item tags="aa"/>
      <attr-item tags="an"/>
      <attr-item tags="nn"/>
    </def-attr>
   <def-attr n="a_gender">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="nt"/>
      <attr-item tags="mf"/>
      <attr-item tags="mfn"/>
    </def-attr>
<def-attr n="a_kaz_verb"> 
      <attr-item tags="v.tv"/>
      <attr-item tags="v.iv"/>

    </def-attr>
 <def-attr n="a_tense">
      <attr-item tags="pres"/>
      <attr-item tags="past"/>
    </def-attr> 

<def-attr n="a_num">
      <attr-item tags="num"/>
      <attr-item tags="num.ord"/>
      <attr-item tags="num.ord.nom"/>
      <attr-item tags="num.ord.subst"/>
      <attr-item tags="num.ord.subst.nom"/>
      <attr-item tags="num.coll"/>
    </def-attr>

  </section-def-attrs>


  <section-def-vars> 
    <def-var n="number"/>
    <def-var n="possessive"/>
    <def-var n="current_verb"/>
    <def-var n="NEW-noun_lu"/>    
    <def-var n="case"/> 
    <def-var n="tense"/>   
<def-var n="verb-pers"/>
<def-var n="verb-nbr"/>

<def-var n="pptag"/> <!-- Will contain the tag of the next postpositional phrase generated (AdvP, GenP, etc.) -->
<def-var n="genpp"/> <!-- yes: will generate postposition; no= won't -->

<def-var n="num_lu"/>  
<def-var n="postposition_lu"/> <!-- complete postposition ready for lu -->
<def-var n="formality"/> <!-- Used to generate formal versions of 2nd person pronouns -->

  </section-def-vars>

  <section-def-macros>
    <def-macro n="test" npar="1">
          <let>   <!-- number="" -->
            <var n="number"/>
            <lit v=""/>
          </let>
    </def-macro>

    <!-- macro stolen from apertium-eng-kaz -->



   <def-macro n="select-case" npar="1">
   <!-- ugly macro: can we use lists for tags? -->
      <choose>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="nom"/>
             </equal>
            </test>
             <let><var n="case"/><lit-tag v="nom"/></let>
         </when>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="acc"/>
             </equal>
             </test>
            <let><var n="case"/><lit-tag v="acc"/></let>
         </when>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="dat"/>
             </equal>
            </test>
             <let><var n="case"/><lit-tag v="dat"/></let>
         </when>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="gen"/>
             </equal>
            </test>
             <let><var n="case"/><lit-tag v="gen"/></let>
         </when>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="prp"/>
             </equal>
             </test>
            <let><var n="case"/><lit-tag v="CD"/></let>
         </when>
         <when>
           <test>
             <equal>
                <clip side="sl" pos="1" part="a_case"/>
                <lit-tag v="ins"/>
             </equal>
            </test>
             <let><var n="case"/><lit-tag v="ins"/></let>
         </when>
         <otherwise>
             <let><var n="case"/><lit-tag v="CD"/></let>
         </otherwise>
      </choose>
   </def-macro>

<def-macro n="default-nbr-pers" npar="0">
    <choose>
     <when>
       <test>
         <equal><var n="verb-pers"/><lit v=""/></equal></test>
      <let>
          <var n="verb-pers"/><lit-tag v="p3"/>
      </let>
     </when>
    </choose>
    <choose>
     <when>
       <test>
         <equal><var n="verb-nbr"/><lit v=""/></equal></test>
      <let>
          <var n="verb-nbr"/><lit-tag v="sg"/>
      </let>
     </when>
    </choose>
</def-macro>    



<def-macro n="NEW-gen-simple-verb" npar="1">  

<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag><!-- negative -->
        <tag><lit-tag v="CD"/></tag> 
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>
          <lit-tag v="5"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
          <lit-tag v="7"/>
        </lu>
      </chunk>
        </out>
</def-macro>

<!-- macro from eng-kaz to prepositions-->
<!--Numerals def-macro-->

<def-macro n="choose_case_and_postposition2" npar="2">  
    <let><var n="pptag"/><lit-tag v="PP"/></let> <!-- for most of them -->
    <let><var n="genpp"/><lit v="no"/></let> <!-- for simple cases -->

    <choose>
      <when> <!-- make genpp="yes" when a postposition is detected -->
        <test>
          <or>
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="n"/>
            </equal>
     
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="post"/>
            </equal>

          </or>  
        </test>
        <let><var n="genpp"/><lit v="yes"/></let> <!-- for simple cases -->
      </when>
    </choose>

    <choose>
      <when>
        <test>
          <equal><var n="genpp"/><lit v="no"/></equal>
        </test>
        <choose> <!-- no postpositions -->
          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="в"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="loc"/>
            </let>
       </when> 
 <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="per"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="loc"/>
            </let>
       </when> 
<when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="off"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="abl"/>
            </let>
       </when> 
<when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="into"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="dat"/>
            </let>
       </when> 
<when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="among"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="gen"/>
            </let>
       </when> 

      <when>   <!-- at and in have the same translation: locative -->
        <test>
          <equal caseless="yes">
            <clip pos="1" side="sl" part="lem"/>
            <lit v="at"/>
          </equal>
        </test>
        <let>
          <var n="case"/>
          <lit-tag v="loc"/>
        </let>
    </when> 
  
           <when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="из"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>

       </when>    
<when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="after"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>
       </when>  
<when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="throughout"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="nom"/>
             </let>
       </when>    

<when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="since"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>
       </when>   
          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="к"/>
              </equal>
            </test>
            <let>
              <var n="case"/>
              <lit-tag v="dat"/>
            </let>
      </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="с"/>
                </equal>
             </test>
             <let>
               <var n="case"/>
               <lit-tag v="ins"/>
             </let>
              </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="of"/>
                 </equal>
              </test>
              <let>
                <var n="case"/>
                <lit-tag v="gen"/>
              </let>
              <let>
                 <var n="pptag"/>
                 <lit-tag v="GenP"/>   
              </let>
       </when>    

           <otherwise>
              <let>
                <var n="case"/>
                <lit-tag v="ins"/> <!-- Choice when we don't know the translation of the preposition, can be improved -->
              </let>
              <let>
                <var n="pptag"/>
                <lit-tag v="PP"/>  
              </let>
            </otherwise>
    </choose>
      </when> <!-- End of solutions without postpositions -->

      <when>  <!--- Now, with postpositions -->
        <test>
          <equal>
             <var n="genpp"/>
             <lit v="yes"/>
          </equal>
        </test>
        <choose> <!-- Generate postposition --> 
          <when> <!-- noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="n"/>
           </equal>
             </test>
             <let><var n="case"/><lit-tag v="gen"/></let>
             <let><var n="pptag"/><lit-tag v="PP"/></let>
             <!-- we need to compute "possessive"  --> 
 
<let><var n="possessive"/><lit-tag v="px3sp"/></let> <!-- default value -->

<choose> 
<when>
   <test>
      <and>
          <equal><clip pos="2" side="sl" part="a_pers"/><lit-tag  v="p1"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
       </and>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1sg"/></let>
</when>


<when>
   <test>
      <and>
          <equal><clip  pos="2" side="sl" part="a_pers"/><lit-tag  v="p1"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
       </and>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1pl"/></let>
</when>
<when><!--under you-->
   <test>
      <and>
          <equal><clip pos="2" side="sl" part="a_pers"/><lit-tag  v="p2"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="sp"/></equal>
	
       </and>
    </test>      
<let><var  n="formality"/><lit-tag v="frm"/></let>
<let><var  n="possessive"/><lit-tag v="px2sg.frm"/></let>
</when>



<!-- ...etc remaining cases ... -->
</choose>
                  
              <!-- end of computation of "possessive" -->
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="n"/>
			
                        <!-- <lit-tag v="px3sp"/>  -->
                     <var n="possessive"/>
                        
                        
                <clip part="a_cas" side="tl" pos="1"/> 
                      </concat>
             </let>
      </when>
          <when> <!-- non-noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="post"/>
           </equal>
             </test>
             <choose>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rnom"/></equal></test>
                   <let><var n="case"/><lit-tag v="nom"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rdat"/></equal></test>
                   <let><var n="case"/><lit-tag v="dat"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rabl"/></equal></test>
                   <let><var n="case"/><lit-tag v="abl"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rloc"/></equal></test>
                   <let><var n="case"/><lit-tag v="loc"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rins"/></equal></test>
                   <let><var n="case"/><lit-tag v="ins"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Racc"/></equal></test>
                   <let><var n="case"/><lit-tag v="acc"/></let>
                </when>
                <when> <!-- This case is unlikely, but we'll leave it just in case -->
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rgen"/></equal></test>
                   <let><var n="case"/><lit-tag v="gen"/></let>
                </when>
             </choose>
             <let><var n="pptag"/><lit-tag v="PP"/></let>
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="post"/>
                      </concat>
             </let>
      </when>
    </choose>
       </when>
     </choose>
    </def-macro>

<def-macro n="NEW-build-noun-lu-2-4-5-sg" npar="1"> 
     <let>
           <var n="NEW-noun_lu"/>
           <concat>
               <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- force singular number (used with numerals) -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive -->
               <lit-tag v="5"/> <!-- for case -->
           </concat>  
        </let>
</def-macro>

<def-macro n="NEW-build-noun-lu-2-4-5" npar="1"> 
     <let>
           <var n="NEW-noun_lu"/>
           <concat>
               <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- for number -->	
               <!-- no need to link person -->
 		<lit-tag v="4"/> <!-- for possessive -->
               <lit-tag v="5"/> <!-- for case -->
 <!-- for case -->
           </concat>  
        </let>
</def-macro>

<def-macro n="build-num-lu" npar="1"> 
     <let>
           <var n="num_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_num"/>
           </concat>  
        </let>
</def-macro>

<def-macro n="out-blank-if-not-single-space" npar="1">
<!-- Outputs nothing if the blank is " " and the blank otherwise..-->
<!-- Takes one position parameter -->
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <b pos="1"/>
                <lit v=" "/>
              </equal>
            </not>
          </test>
          <out>
            <b pos="1"/>
          </out>
        </when>
      </choose>
    </def-macro>

<def-macro n="build-possessive-from-possessive-determiner" npar="1">


<choose> 
<when>
   <test>
          <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit  v="мой"/></equal>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1sg"/></let>
</when>


<when>
   <test>
          <equal caseless="yes"><clip  pos="1" side="sl" part="lem"/><lit  v="our"/></equal>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1pl"/></let>
</when>
<when>
   <test>
          <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit  v="your"/></equal>
    </test>      
<let><var  n="possessive"/><lit-tag v="px2sg"/></let>
</when>

<otherwise>
<let><var n="possessive"/><lit-tag v="px3sp"/></let> <!-- default value -->
</otherwise>

</choose>

</def-macro>

  </section-def-macros>



  <section-rules>

    <rule comment="RULE: SENT">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


<!-- from eng-kaz for в саду-->

<rule comment="NEW RULE: prep noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<!--
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
-->
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="2"/>
     </call-macro>
<!--
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
-->
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-nom-post">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: subj-pron">
  <pattern>
    <pattern-item n="subj-pron"/>
  </pattern>
  <action>

  <choose>
    <when>
      <test>
       <equal>
         <clip pos="1" side="sl" part="a_nbr"/>
         <lit-tag v="sp"/>
       </equal>
      </test>
       <let><var n="number"/><lit-tag v="sg"/></let> <!-- choosing singular in the absence of information -->
    </when>
       <otherwise>
         <let>
           <var n="number"/><clip pos="1" side="tl" part="a_nbr"/>
         </let>
       </otherwise>
  </choose>
  <!--<choose>
    <when>
     <test>  
       <equal>
          <clip pos="1" side="sl" part="a_pers"/>
          <lit-tag v="p2"/>
       </equal>
     </test>
     <let><var n="formality"/><lit-tag v="frm"/></let>
    </when>
     <otherwise>
     <let><var n="formality"/><lit v="FD"/></let>
     </otherwise>
  </choose>-->

  <out>
   <chunk name="subj-pron" case="caseFirstWord">
    <tags>
    <tag><lit-tag v="NP-pron"/></tag>
    <tag><var n="number"/></tag>
    <tag><clip pos="1" side="sl" part="a_pers"/></tag> 
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="nom"/></tag>
     
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_kaz_perspron"/>
      <clip pos="1" side="tl" part="a_pers"/>
      <lit-tag v="2"/> <!-- number -->
      <lit-tag v="4"/> <!-- possession -->
      <lit-tag v="5"/> <!-- case -->
    </lu>
  </chunk>
  </out>
 </action>
</rule>



<!-- RULE noun`s noun ex: книга ученик -->
<rule comment="NEW RULE: noun1 noun2">  <!-- football player-->
  <pattern>
    <pattern-item n="nom"/>
 <pattern-item n="nom"/>
  </pattern>
  <action>

    <out>
    <chunk name="noun1-noun2">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
     <clip pos="2" side="tl" part="lem"/> 
     <clip pos="2" side="tl" part="a_nom"/>
     <clip pos="2" side="tl" part="a_nbr"/>
     <lit-tag v="gen"/>
    </lu>
   
<b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
                <lit-tag v="px3sp"/><!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
    </chunk>
    </out>
  </action>
</rule>

 
<rule comment="NEW RULE: pos-pron noun">  <!-- мой друг-->
  <pattern>
    <pattern-item n="subj-pron-pos"/>  <!--есімдік -->
 <pattern-item n="nom"/>  <!--зат есім -->
  </pattern>
  <action>  
	<choose>
  	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p1"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px1sg"/></let>
	</when>
 	 <when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p1"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px1sg"/></let>
	</when>
	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p1"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px1pl"/></let>
	</when>


	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p1"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px1pl"/></let>
	</when>
	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p2"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px2sg"/></let>
	</when>
 	 <when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p2"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px2sg"/></let>
	</when>
	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p2"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px2pl"/></let>
	</when>


	<when> 
 	   <test>
		<and>    
			<equal><clip pos="1" side="sl" part="a_pers"/><lit-tag v="p2"/></equal>
			<equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
			<equal><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>		
		</and>
	   </test>
		     <let><var n="a_possessive"/><lit-tag v="px2pl"/></let>
	</when>
		<otherwise><let><var n="a_possessive"/><lit-tag v="px3sp"/></let></otherwise>
	</choose>
    <out>
    <chunk name="subj-pron-pos-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag> 
    <tag><clip pos="2" side="tl" part="a_nbr"/></tag> 
    <tag><clip pos="1" side="sl" part="a_pers"/></tag> 
    <tag><var n="a_possessive"/> </tag> 
    <tag><clip pos="2" side="tl" part="a_case"/></tag>
    </tags>
    <lu>
    <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_kaz_pospron"/>
      <lit-tag v="4"/> <!-- number -->
      <lit-tag v="3"/> <!-- person -->
      <lit-tag v="nom"/> <!-- case -->
    </lu>     <b pos="1"/>
       <lu>
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="3"/>                          
 	       <lit-tag v="5"/> 
  	       <lit-tag v="6"/>
    </lu>      		
    </chunk>
    </out>
  </action>
</rule>


<!-- Я ем\ел-->

<rule comment="NEW RULE: verb"> 
  <pattern>
    <pattern-item n="pers-verb"/>
  </pattern>
  <action>
     <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>

      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </when>

      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>


<!-- я буду играть -->
<rule comment="NEW RULE: fut-verb"> 
  <pattern>
    <pattern-item n="budu-vbser"/>
<pattern-item n="approx-inf-verb"/> 

  </pattern>
  <action>
     <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="fut"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>

      </when>

          <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>


<!-- comment=¨REGLA: NUM¨-->

<rule comment="NEW RULE: det num noun1 noun2"> <!-- three good football players-->
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="4"/>
    </call-macro> <!-- noun is built in singular as the NP contains numerals -->
     <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test>
<or>
<equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal>
 <equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="qnt"/></equal>
</or>
</test>
    <out>
    <chunk name="detdem-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder: use 'semantic' number for SL -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu>  
     <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
     </lu>
    <b pos="3"/>
 <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
  <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
<b pos="1"/>
  
    <lu> 
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu> 
 <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
    </lu>
    <b pos="3"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-num-nom"> <!-- the three good football players-->
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
    <lu>  
      <var n="num_lu"/>
    </lu>
    <b pos="2"/>
   <lu> 
 <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
    </lu>
    <b pos="3"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>




 
<rule comment="NEW RULE: det num noun"> 
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="3"/>
    </call-macro> <!-- noun is built in singular as the NP contains numerals -->
     <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test>
<or>
<equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal>
 <equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="qnt"/></equal>
</or>
</test>
    <out>
    <chunk name="detdem-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder: use 'semantic' number for SL -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
  <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
<b pos="1"/>
  
    <lu> 
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
    <lu>  
      <var n="num_lu"/>
    </lu>
    <b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>


<rule comment="NEW RULE: num">  
  <pattern>
    <pattern-item n="num"/>
  </pattern>
  <action>
   <call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="num">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: num noun1 noun2"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="3"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="num-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
	<b pos="1"/>
<lu>
     <clip pos="2" side="tl" part="lem"/> 
     <clip pos="2" side="tl" part="a_nom"/>
     <clip pos="2" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
</lu>
	<b pos="2"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>


<rule comment="NEW RULE: num noun"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="2"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
<!--<choose>
                <when>
                   <test><equal><clip part="a_case" pos="1" side="tl"/><lit-tag v="ins"/></equal></test>
                   <let><var n="case"/><lit-tag v="nom"/></let>
                </when>
</choose>-->
    <out>
    <chunk name="num-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><clip part="a_case" pos="1" side="sl"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
	<b pos="1"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>




<rule comment="NEW RULE: prep num noun1 noun2"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="3"/>
      </call-macro>
<call-macro n="build-num-lu"><with-param pos="2"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  
               <var n="num_lu"/>
            </lu>
<b/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <clip pos="3" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="px3sp"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b pos="3"/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="4"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
 <lu>  
               <var n="num_lu"/>
            </lu>
 <b pos="2"/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <clip pos="3" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
<b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: infinitive - verb"> 
  <pattern>
    <pattern-item n="approx-inf-verb"/>
  </pattern>
  <action>
     <let><var n="tense"/><lit-tag v="aor"/></let> 
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
 
  </action>
</rule>
<rule comment="NEW RULE: byt' + infinitive"> <!--я буду играть -->
  <pattern>

    <pattern-item n="vbmod"/>
    <pattern-item n="approx-inf-verb"/>  <!--Я буду играть -  ен ойнаймын-->
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="must-inf">
      <tags>
        <tag><lit-tag v="VP_byt'_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
         <lit-tag v="n"/>
          <lit-tag v="nom"/>	
        </lu>
      </chunk>
  </out>
      
  </action>
</rule>


<!-- rule for NUM the end-->

<!-- editing a rule stolen from apertium-eng-kaz -->

<rule comment="RULE: noun">  
  <pattern>
    <pattern-item n="nom"/>
  </pattern>
  <action>
  <call-macro n="NEW-build-noun-lu-2-4-5">
       <with-param pos="1"/>
  </call-macro> 
  <call-macro n="select-case">
       <with-param pos="1"/>
  </call-macro> 

    <let> <var n="possessive"/><lit-tag v="PXD"/></let>
    <out>
    <chunk name="nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
    <tag><var n="case"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
  </action>
</rule>

  </section-rules>
</transfer>

